# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s7tT1OzS_W6kTQr_BBsrxG4yBHWBFPEr
"""

# تثبيت مكتبة kaggle
!pip install -q kaggle

# رفع ملف kaggle.json (مرة واحدة فقط)
from google.colab import files
files.upload()  # اختر kaggle.json من جهازك

# إعداد الملف
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# تحميل بيانات Bird vs Drone
!kaggle datasets download -d harshwalia/bird-vs-drone-new

# فك الضغط
! unzip -q bird-vs-drone-new.zip -d bird-vs-drone

from tensorflow.keras.preprocessing.image import ImageDataGenerator

img_size = 128
batch_size = 32

train_path = '/content/bird-vs-drone/BVD/Train'
val_path = '/content/bird-vs-drone/BVD/Val'

train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    train_path,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    class_mode='binary'
)

val_data = val_datagen.flow_from_directory(
    val_path,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    class_mode='binary'
)

import os

# استعراض جميع المجلدات داخل مجلد البيانات
for root, dirs, files in os.walk("/content/bird-vs-drone"):
    for name in dirs:
        print(os.path.join(root, name))

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(img_size, img_size, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_data, validation_data=val_data, epochs=10)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# إعادة ضبط البيانات لتجنب مشاكل بالترتيب
val_data.reset()

# التنبؤ بالنتائج
pred = model.predict(val_data)
pred_labels = (pred > 0.5).astype(int).reshape(-1)

# الحصول على التسميات الحقيقية
true_labels = val_data.classes
class_names = list(val_data.class_indices.keys())

print("Classification Report:")
print(classification_report(true_labels, pred_labels, target_names=class_names))

cm = confusion_matrix(true_labels, pred_labels)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam

# تحميل MobileNetV2 بدون الطبقات العليا
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(128, 128, 3))
base_model.trainable = False  # لا ندرّب الطبقات الأساسية

# إضافة طبقات التصنيف الجديدة
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.5)(x)
output = Dense(1, activation='sigmoid')(x)

# بناء النموذج النهائي
model_mobilenet = Model(inputs=base_model.input, outputs=output)

model_mobilenet.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

history_mobilenet = model_mobilenet.fit(
    train_data,
    validation_data=val_data,
    epochs=10
)

import matplotlib.pyplot as plt

plt.plot(history_mobilenet.history['accuracy'], label='Training Accuracy')
plt.plot(history_mobilenet.history['val_accuracy'], label='Validation Accuracy')
plt.title('MobileNetV2 Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history_mobilenet.history['loss'], label='Training Loss')
plt.plot(history_mobilenet.history['val_loss'], label='Validation Loss')
plt.title('MobileNetV2 Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# إعادة ضبط البيانات
val_data.reset()

# التنبؤ بالنتائج باستخدام MobileNetV2
pred_mobilenet = model_mobilenet.predict(val_data)
pred_labels_mobilenet = (pred_mobilenet > 0.5).astype(int).reshape(-1)

# الحصول على التسميات الحقيقية
true_labels = val_data.classes
class_names = list(val_data.class_indices.keys())

print("Classification Report for MobileNetV2:")
print(classification_report(true_labels, pred_labels_mobilenet, target_names=class_names))

cm = confusion_matrix(true_labels, pred_labels_mobilenet)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Greens', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix – MobileNetV2')
plt.show()